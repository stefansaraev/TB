#!/bin/bash

# SPDX-License-Identifier: GPL-2.0-only

. config/options

update_addons_xml() {
  echo "[*] cleanup addons ..."
  olddir=""
  find target/addons/$OS_VERSION -iname '*.zip' | sort -rV | while read line ; do
    dir=$(dirname $line)
    if [ "$olddir" = "$dir" ] ; then
      rm -f $line
    fi
    olddir=$dir
  done

  echo "[*] updating addons.xml* ..."
  rm -rf .addons
  pwd=$(pwd)
  find target/addons/$OS_VERSION -iname addons.xml | while read line ; do
    localdir=$(echo $line | sed s/addons.xml//g)
    echo " [*] updating $line..."
    echo '<?xml version="1.0" encoding="UTF-8" ?>' > $line.tmp
    echo '<addons>' >> $line.tmp
    for zip in $localdir/*/*.zip ; do
      mkdir -p ".addons/$localdir"
      unzip $zip "*/addon.xml" -d ".addons/$localdir" &>/dev/null || :
      addon=$(unzip -qql $zip  | head -n1 | tr -s ' ' | cut -d' ' -f5-)
      unzip $zip "*/icon.png" -d ".addons/$localdir" &>/dev/null || xmlstarlet ed -L \
        -i /addon/extension/platform -t elem -n noicon -v "true" ".addons/$localdir/$addon/addon.xml"
      unzip $zip "*/fanart.png" -d ".addons/$localdir" &>/dev/null || xmlstarlet ed -L \
        -i /addon/extension/platform -t elem -n nofanart -v "true" ".addons/$localdir/$addon/addon.xml"
      xmlstarlet ed -L --subnode "/addon/extension[@point='xbmc.addon.metadata']" \
        -t elem -n size -v "$(du -b $zip | cut -f1)" ".addons/$localdir/$addon/addon.xml"
    done
    find .addons/$localdir -iname addon.xml | grep -v resources/ | while read xml ; do
      cat $xml | grep -v "<?" >> $line.tmp
    done
    echo '</addons>' >> $line.tmp
    mv $line.tmp $line
    cd $localdir
    md5sum addons.xml > addons.xml.md5
    cd $pwd
  done
  rm -rf .addons
}

upload() {
  if [ -f .work/repoconfig ] ; then
    . .work/repoconfig
  fi
  if [ -z "$RSYNC_REPO" ] ; then
    echo "*** ERROR: \$RSYNC_REPO not set. see .work/repoconfig ***"
    exit 0
  fi
  update_addons_xml
  rsync -av --progress target/addons/$OS_VERSION $RSYNC_REPO
}

build() {
  for package in $(find packages/addons -iname package.mk) ; do
    unset -f addon
    . $package
    if [ "$(type -t addon)" = "function" ]; then
      PROJECT=$PROJECT ARCH=$TARGET_ARCH ./scripts/create_addon $PKG_NAME
    fi
  done
}

usage() {
  echo "  usage: '$0 -u' to upload"
  echo "         '$0 -b' to build"
}

case $1 in
  -b) build ;;
  -u) upload ;;
   *) usage ;;
esac
